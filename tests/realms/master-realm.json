{
  "accessCodeLifespan": 60,
  "accessCodeLifespanLogin": 1800,
  "accessCodeLifespanUserAction": 300,
  "accessTokenLifespan": 60,
  "accessTokenLifespanForImplicitFlow": 900,
  "actionTokenGeneratedByAdminLifespan": 43200,
  "actionTokenGeneratedByUserLifespan": 300,
  "adminEventsDetailsEnabled": false,
  "adminEventsEnabled": false,
  "attributes": {
    "cibaAuthRequestedUserHint": "login_hint",
    "cibaBackchannelTokenDeliveryMode": "poll",
    "cibaExpiresIn": "120",
    "cibaInterval": "5",
    "parRequestUriLifespan": "60",
    "realmReusableOtpCode": "false"
  },
  "authenticationFlows": [
    {
      "alias": "Account verification options",
      "authenticationExecutions": [
        {
          "authenticator": "idp-email-verification",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Verify Existing Account by Re-authentication",
          "priority": 20,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Method with which to verity the existing account",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Browser - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-otp-form",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Direct Grant - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "direct-grant-validate-otp",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "First broker login - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-otp-form",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP is required for the authentication",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Handle Existing Account",
      "authenticationExecutions": [
        {
          "authenticator": "idp-confirm-link",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Account verification options",
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Reset - Conditional OTP",
      "authenticationExecutions": [
        {
          "authenticator": "conditional-user-configured",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-otp",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "User creation or linking",
      "authenticationExecutions": [
        {
          "authenticator": "idp-create-user-if-unique",
          "authenticatorConfig": "create unique user config",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Handle Existing Account",
          "priority": 20,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Flow for the existing/non-existing user alternatives",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "Verify Existing Account by Re-authentication",
      "authenticationExecutions": [
        {
          "authenticator": "idp-username-password-form",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "First broker login - Conditional OTP",
          "priority": 20,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Reauthentication of existing account",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "browser",
      "authenticationExecutions": [
        {
          "authenticator": "auth-cookie",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "auth-spnego",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "DISABLED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "identity-provider-redirector",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 25,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "forms",
          "priority": 30,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "browser based authentication",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "clients",
      "authenticationExecutions": [
        {
          "authenticator": "client-secret",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-jwt",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-secret-jwt",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 30,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        },
        {
          "authenticator": "client-x509",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 40,
          "requirement": "ALTERNATIVE",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Base authentication for clients",
      "providerId": "client-flow",
      "topLevel": true
    },
    {
      "alias": "direct grant",
      "authenticationExecutions": [
        {
          "authenticator": "direct-grant-validate-username",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "direct-grant-validate-password",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Direct Grant - Conditional OTP",
          "priority": 30,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "OpenID Connect Resource Owner Grant",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "docker auth",
      "authenticationExecutions": [
        {
          "authenticator": "docker-http-basic-authenticator",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Used by Docker clients to authenticate against the IDP",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "first broker login",
      "authenticationExecutions": [
        {
          "authenticator": "idp-review-profile",
          "authenticatorConfig": "review profile config",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "User creation or linking",
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "forms",
      "authenticationExecutions": [
        {
          "authenticator": "auth-username-password-form",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Browser - Conditional OTP",
          "priority": 20,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Username, password, otp and other auth forms.",
      "providerId": "basic-flow",
      "topLevel": false
    },
    {
      "alias": "registration",
      "authenticationExecutions": [
        {
          "authenticator": "registration-page-form",
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "registration form",
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "registration flow",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "registration form",
      "authenticationExecutions": [
        {
          "authenticator": "registration-user-creation",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-password-action",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 50,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-recaptcha-action",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 60,
          "requirement": "DISABLED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "registration-terms-and-conditions",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 70,
          "requirement": "DISABLED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "registration form",
      "providerId": "form-flow",
      "topLevel": false
    },
    {
      "alias": "reset credentials",
      "authenticationExecutions": [
        {
          "authenticator": "reset-credentials-choose-user",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-credential-email",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 20,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticator": "reset-password",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 30,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        },
        {
          "authenticatorFlow": true,
          "autheticatorFlow": true,
          "flowAlias": "Reset - Conditional OTP",
          "priority": 40,
          "requirement": "CONDITIONAL",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "Reset credentials for a user if they forgot their password or something",
      "providerId": "basic-flow",
      "topLevel": true
    },
    {
      "alias": "saml ecp",
      "authenticationExecutions": [
        {
          "authenticator": "http-basic-authenticator",
          "authenticatorFlow": false,
          "autheticatorFlow": false,
          "priority": 10,
          "requirement": "REQUIRED",
          "userSetupAllowed": false
        }
      ],
      "builtIn": true,
      "description": "SAML ECP Profile Authentication Flow",
      "providerId": "basic-flow",
      "topLevel": true
    }
  ],
  "authenticatorConfig": [
    {
      "alias": "create unique user config",
      "config": {
        "require.password.update.after.registration": "false"
      }
    },
    {
      "alias": "review profile config",
      "config": {
        "update.profile.on.first.login": "missing"
      }
    }
  ],
  "browserFlow": "browser",
  "browserSecurityHeaders": {
    "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
    "contentSecurityPolicyReportOnly": "",
    "referrerPolicy": "no-referrer",
    "strictTransportSecurity": "max-age=31536000; includeSubDomains",
    "xContentTypeOptions": "nosniff",
    "xFrameOptions": "SAMEORIGIN",
    "xRobotsTag": "none",
    "xXSSProtection": "1; mode=block"
  },
  "bruteForceProtected": false,
  "clientAuthenticationFlow": "clients",
  "clientOfflineSessionIdleTimeout": 0,
  "clientOfflineSessionMaxLifespan": 0,
  "clientPolicies": {
    "policies": []
  },
  "clientProfiles": {
    "profiles": []
  },
  "clientScopeMappings": {
    "account": [
      {
        "client": "account-console",
        "roles": [
          "manage-account",
          "view-groups"
        ]
      }
    ]
  },
  "clientScopes": [
    {
      "attributes": {
        "consent.screen.text": "",
        "display.on.consent.screen": "false",
        "include.in.token.scope": "false"
      },
      "description": "OpenID Connect scope for add allowed web origins to the access token",
      "name": "web-origins",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "introspection.token.claim": "true"
          },
          "consentRequired": false,
          "name": "allowed web origins",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-allowed-origins-mapper"
        }
      ]
    },
    {
      "attributes": {
        "display.on.consent.screen": "false",
        "include.in.token.scope": "true"
      },
      "description": "Microprofile - JWT built-in scope",
      "name": "microprofile-jwt",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "upn",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "username",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "upn",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "groups",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "multivalued": "true",
            "user.attribute": "foo"
          },
          "consentRequired": false,
          "name": "groups",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-realm-role-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${addressScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: address",
      "name": "address",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "user.attribute.country": "country",
            "user.attribute.formatted": "formatted",
            "user.attribute.locality": "locality",
            "user.attribute.postal_code": "postal_code",
            "user.attribute.region": "region",
            "user.attribute.street": "street",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "address",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-address-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${rolesScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "false"
      },
      "description": "OpenID Connect scope for add user roles to the access token",
      "name": "roles",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "realm_access.roles",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "multivalued": "true",
            "user.attribute": "foo"
          },
          "consentRequired": false,
          "name": "realm roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-realm-role-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "introspection.token.claim": "true"
          },
          "consentRequired": false,
          "name": "audience resolve",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-audience-resolve-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "resource_access.${client_id}.roles",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "multivalued": "true",
            "user.attribute": "foo"
          },
          "consentRequired": false,
          "name": "client roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-client-role-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${profileScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: profile",
      "name": "profile",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "updated_at",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "long",
            "user.attribute": "updatedAt",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "updated at",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "website",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "website",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "website",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "zoneinfo",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "zoneinfo",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "zoneinfo",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "locale",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "locale",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "locale",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "full name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-full-name-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "nickname",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "nickname",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "nickname",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "preferred_username",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "username",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "username",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "profile",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "profile",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "profile",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "middle_name",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "middleName",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "middle name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "family_name",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "lastName",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "family name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "gender",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "gender",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "gender",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "birthdate",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "birthdate",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "birthdate",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "given_name",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "firstName",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "given name",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "picture",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "picture",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "picture",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        }
      ]
    },
    {
      "attributes": {
        "display.on.consent.screen": "false",
        "include.in.token.scope": "false"
      },
      "description": "OpenID Connect scope for add acr (authentication context class reference) to the token",
      "name": "acr",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "id.token.claim": "true",
            "introspection.token.claim": "true"
          },
          "consentRequired": false,
          "name": "acr loa level",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-acr-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${offlineAccessScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "description": "OpenID Connect built-in scope: offline_access",
      "name": "offline_access",
      "protocol": "openid-connect"
    },
    {
      "attributes": {
        "consent.screen.text": "${phoneScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: phone",
      "name": "phone",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "phone_number",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "phoneNumber",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "phone number",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "phone_number_verified",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "boolean",
            "user.attribute": "phoneNumberVerified",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "phone number verified",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${emailScopeConsentText}",
        "display.on.consent.screen": "true",
        "include.in.token.scope": "true"
      },
      "description": "OpenID Connect built-in scope: email",
      "name": "email",
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "email",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "email",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "email",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        },
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "email_verified",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "boolean",
            "user.attribute": "emailVerified",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "email verified",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-property-mapper"
        }
      ]
    },
    {
      "attributes": {
        "consent.screen.text": "${samlRoleListScopeConsentText}",
        "display.on.consent.screen": "true"
      },
      "description": "SAML role list",
      "name": "role_list",
      "protocol": "saml",
      "protocolMappers": [
        {
          "config": {
            "attribute.name": "Role",
            "attribute.nameformat": "Basic",
            "single": "false"
          },
          "consentRequired": false,
          "name": "role list",
          "protocol": "saml",
          "protocolMapper": "saml-role-list-mapper"
        }
      ]
    }
  ],
  "clientSessionIdleTimeout": 0,
  "clientSessionMaxLifespan": 0,
  "clients": [
    {
      "alwaysDisplayInConsole": false,
      "attributes": {
        "post.logout.redirect.uris": "+"
      },
      "authenticationFlowBindingOverrides": {},
      "baseUrl": "/realms/master/account/",
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "account",
      "consentRequired": false,
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "roles",
        "profile",
        "email"
      ],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_account}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ],
      "protocol": "openid-connect",
      "publicClient": true,
      "redirectUris": [
        "/realms/master/account/*"
      ],
      "rootUrl": "${authBaseUrl}",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {
        "pkce.code.challenge.method": "S256",
        "post.logout.redirect.uris": "+"
      },
      "authenticationFlowBindingOverrides": {},
      "baseUrl": "/realms/master/account/",
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "account-console",
      "consentRequired": false,
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "roles",
        "profile",
        "email"
      ],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_account-console}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ],
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {},
          "consentRequired": false,
          "name": "audience resolve",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-audience-resolve-mapper"
        }
      ],
      "publicClient": true,
      "redirectUris": [
        "/realms/master/account/*"
      ],
      "rootUrl": "${authBaseUrl}",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "admin-cli",
      "consentRequired": false,
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "roles",
        "profile",
        "email"
      ],
      "directAccessGrantsEnabled": true,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_admin-cli}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ],
      "protocol": "openid-connect",
      "publicClient": true,
      "redirectUris": [],
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": false,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "bearerOnly": true,
      "clientAuthenticatorType": "client-secret",
      "clientId": "broker",
      "consentRequired": false,
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "roles",
        "profile",
        "email"
      ],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_broker}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ],
      "protocol": "openid-connect",
      "publicClient": false,
      "redirectUris": [],
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "bearerOnly": true,
      "clientAuthenticatorType": "client-secret",
      "clientId": "master-realm",
      "consentRequired": false,
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "roles",
        "profile",
        "email"
      ],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "master Realm",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ],
      "publicClient": false,
      "redirectUris": [],
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {},
      "authenticationFlowBindingOverrides": {},
      "bearerOnly": true,
      "clientAuthenticatorType": "client-secret",
      "clientId": "orwell-realm",
      "consentRequired": false,
      "defaultClientScopes": [],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "orwell Realm",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [],
      "publicClient": false,
      "redirectUris": [],
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": []
    },
    {
      "alwaysDisplayInConsole": false,
      "attributes": {
        "pkce.code.challenge.method": "S256",
        "post.logout.redirect.uris": "+"
      },
      "authenticationFlowBindingOverrides": {},
      "baseUrl": "/admin/master/console/",
      "bearerOnly": false,
      "clientAuthenticatorType": "client-secret",
      "clientId": "security-admin-console",
      "consentRequired": false,
      "defaultClientScopes": [
        "web-origins",
        "acr",
        "roles",
        "profile",
        "email"
      ],
      "directAccessGrantsEnabled": false,
      "enabled": true,
      "frontchannelLogout": false,
      "fullScopeAllowed": false,
      "implicitFlowEnabled": false,
      "name": "${client_security-admin-console}",
      "nodeReRegistrationTimeout": 0,
      "notBefore": 0,
      "optionalClientScopes": [
        "address",
        "phone",
        "offline_access",
        "microprofile-jwt"
      ],
      "protocol": "openid-connect",
      "protocolMappers": [
        {
          "config": {
            "access.token.claim": "true",
            "claim.name": "locale",
            "id.token.claim": "true",
            "introspection.token.claim": "true",
            "jsonType.label": "String",
            "user.attribute": "locale",
            "userinfo.token.claim": "true"
          },
          "consentRequired": false,
          "name": "locale",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-attribute-mapper"
        }
      ],
      "publicClient": true,
      "redirectUris": [
        "/admin/master/console/*"
      ],
      "rootUrl": "${authAdminUrl}",
      "serviceAccountsEnabled": false,
      "standardFlowEnabled": true,
      "surrogateAuthRequired": false,
      "webOrigins": [
        "+"
      ]
    }
  ],
  "components": {
    "org.keycloak.keys.KeyProvider": [
      {
        "config": {
          "algorithm": [
            "RSA-OAEP"
          ],
          "certificate": [
            "MIICmzCCAYMCBgGOQV0QvTANBgkqhkiG9w0BAQsFADARMQ8wDQYDVQQDDAZtYXN0ZXIwHhcNMjQwMzE1MDkwNTAxWhcNMzQwMzE1MDkwNjQxWjARMQ8wDQYDVQQDDAZtYXN0ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCsElZEZgH29eS94mh/u8ftdbdbb/bYxMHBxSecsbWq2XLFGTjEiUVl96jrw4m2tMxuTaS4VzjldeZBFENswEpfdCghozDGHjm8z8VeZvVAWMU6XWrKWVVfLA7uw3doctKOgo3uquORa0m/5TOZhzfFhpaGBhDtu6NnTyTAXWLSnRDqGkDWI2kDqekzhg7qAf7vvaqrEnV8cMMeeULUSQDuwaCraCKlUc4z1IUsEBOdp5IKqkGfC7DRmOw3Z41WGU7xrIVrm/0K5TR7TGT6FNiHBHm4dWmJQ57ve9gadFoOtIBmL5IlKnUEal7jBv7soiI4ndXSijTH8xSNi6Iih3yZAgMBAAEwDQYJKoZIhvcNAQELBQADggEBAKdkVV/juHfhFutjaYyuP8/rgvr/mNc4DG1gaCWy1XW6hNP4zwNwVGkJcvmlnyBOPyj7KUHnDEAGA9FzBlqgpd6FN3T/9QaaSPmH9RK+ej9k/iSXQYkMEe5FmqEps+uCxwbVsBNTqXIEcS5JPJkvMyT8X2mEiGRmmPQWx/IX9L1aG3udVvEtg5gCKTeGi/8OjqtEj468+p5FOSj3NB2rhsIej2yZTfGrNKCvU1Gsn3vV94rFdQ9yND1oblYHJlnFlKnkc3zuyOiuhkOteiAPpGVLFeC0eitjGaxMvtTJcBJ4IF8010HJmHaWPMR4NtLM3ISzHMf8UMESPovKGdHyg8Q="
          ],
          "keyUse": [
            "ENC"
          ],
          "priority": [
            "100"
          ],
          "privateKey": [
            "MIIEowIBAAKCAQEArBJWRGYB9vXkveJof7vH7XW3W2/22MTBwcUnnLG1qtlyxRk4xIlFZfeo68OJtrTMbk2kuFc45XXmQRRDbMBKX3QoIaMwxh45vM/FXmb1QFjFOl1qyllVXywO7sN3aHLSjoKN7qrjkWtJv+UzmYc3xYaWhgYQ7bujZ08kwF1i0p0Q6hpA1iNpA6npM4YO6gH+772qqxJ1fHDDHnlC1EkA7sGgq2gipVHOM9SFLBATnaeSCqpBnwuw0ZjsN2eNVhlO8ayFa5v9CuU0e0xk+hTYhwR5uHVpiUOe73vYGnRaDrSAZi+SJSp1BGpe4wb+7KIiOJ3V0oo0x/MUjYuiIod8mQIDAQABAoIBAALa9QqChNLTxr1t5d0EwS8MDoRaaca0ESEFhABCJKkWnaRupDYCrx+fifKLlpvtCR1ldW/Hpr6MA8udqfbChBlsZIQWYKdQ9hVPf09vNu+f6Xnr9eswq01+firxHGijyyGpQfCtbkRJ+vnPtFj+WOsSrinALQS84dvDgPEeO5cSFC3DG+R1upgI/Heda73nyauASiCztiM5Kk2EYUC1J5R2obCvXxLsEUDyTAgkRMTlU6D9EanxewfDVBeC4XNcWfGn5ZNF5URv++zpOWjMdihLQjK5c6SEKdbvd6JgqlEBGrEIPpgpOCCWhCicXDe+EuRP2VvTcvP6zIpoIiCv0XkCgYEA3OhH4mcz3FMU+QVGuFMZeYEEcvvR4VdMi3nnqOLO6DnnYNUHl3KDnZ3cHYwWOX7jhnIRBZi1ql5jFKVgIBAE2ZagHYVQaYnr+sc9tr+DcxhSdzwyObMU+Zo2vCkemxS2hDma3IDJpyf6h+NVfG5FSNA/0BAUHncNJTCuJn4no/UCgYEAx2gJTIbM7spW6L3egQC284hkUxxmKcIzgyn/tMIu0VoOHpI2sumP4m3SgpfIrIf30/eJbTiPeDWvlEh45lTW1DiZeaHq7x1W1IFK/GB/hBedxFfbhgBdaDkRL8DFhDQnuQ1nt8hwRdgMUwaiIZn0Lmoxm+ezOeDnshwWrXjWc5UCgYAMkcbtUfP4eF28IZm5iTjs2fN3225AxSfc083jpSwiuJC6yMRK0MA+aqoIoFzvXpHxp3HigKLtk7tNhG9ow6CTBOgNZfWCW8+qkEWprVH8bYjbsfglolPyM90jba+JIW+VLHXsUAOpWDQAIWZO0zNsBjVrUE7kwN9lm1R9ajY1NQKBgQCJuQEzKadBBd8gwIJ89tFlQj6IaITnMooBfXBul+9eCKTX2ISO7WHDMbbDG7It93rjm4P/O6FblTi/YY6fBtmZmb3mlD5/B/SAsQvpY3yu7uC4SzYDRx08bq3AHZRNyvfkh62q8XUZyC466cnxCzPrGs1IsK7Iut1L1rqS9XKoQQKBgET8K7lOMhwRyQD1NnjaKGndrvHJ15YRgoxzgphSN/rm5hzqZIqt80ZADECHR2ffG1wn22Ri/6YXTnnTpkK5eCwFtisT+5TLRoNmTHCrnqVaD2bOPJQSL5zEbHRKaEIqgyjOVRKo+1C1R3TdBquUPW7yAwGIDNTZi6CJBo3OMI1v"
          ]
        },
        "name": "rsa-enc-generated",
        "providerId": "rsa-enc-generated",
        "subComponents": {}
      },
      {
        "config": {
          "certificate": [
            "MIICmzCCAYMCBgGOQV0QFDANBgkqhkiG9w0BAQsFADARMQ8wDQYDVQQDDAZtYXN0ZXIwHhcNMjQwMzE1MDkwNTAxWhcNMzQwMzE1MDkwNjQxWjARMQ8wDQYDVQQDDAZtYXN0ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDHz/qpKK1O+LqZyBZIY+k6Y9eFX2OLEJuChIKerfh553QuL16rEz2cr2q1ndmRm/Ytpc54CG1jh1tz/vEABm8N/VOprjto9sa0HuE+OsZJ7TZ1I1UC8IBibiCLWlKd6brgw4i8aWMFc3ncztkrc4J1nNPbjo3G3JBjwSa/in9BRbJeNp02lJ4p5FfONeUuR95EO9RTyZw1JuoU/jGZNFBbZNOK/VRpl3eRfQC5+GKreCTmnghSmJeVNrsg0c3P7NNGNr1o3CtLCx9Y8S5CUTFdxZ6GSoaubispXd+5FIP9GAqadJIe6dH9YTjsQG+UrIEy3erz8GPUltr84+Zq/wrJAgMBAAEwDQYJKoZIhvcNAQELBQADggEBACaPTa5l8VpJfCAwCSlphaYJNJ375hH5ETyjkm+nqF0SJQYEAqj1P71o1pPa7x3ENoJWTMgrlZUrjcJxw5urkk0nFVdmEFZA4YnK6gkUfieBYDaboV/vfaAhLJ0gqTcJ8fU5K5PdXzSvFSdzG/JdVzzNWl0t5OSdOfnkhlGOgmeK67+I6lrcnKTls5r72HjLaTpQOP1Oyc4/Tm11YofGiESojoCJN59U8AFLOr+W3d2uoT1i+nyG22q7SXaMhk0OqVMG8P5I6VDPVaQx7hazksPMXEe/yKJeSntwL6z4jBgpt6SG+5LoUZLSrPMYPafDuhgDbxOkL6tOVigcYz2O4mc="
          ],
          "keyUse": [
            "SIG"
          ],
          "priority": [
            "100"
          ],
          "privateKey": [
            "MIIEpQIBAAKCAQEAx8/6qSitTvi6mcgWSGPpOmPXhV9jixCbgoSCnq34eed0Li9eqxM9nK9qtZ3ZkZv2LaXOeAhtY4dbc/7xAAZvDf1Tqa47aPbGtB7hPjrGSe02dSNVAvCAYm4gi1pSnem64MOIvGljBXN53M7ZK3OCdZzT246NxtyQY8Emv4p/QUWyXjadNpSeKeRXzjXlLkfeRDvUU8mcNSbqFP4xmTRQW2TTiv1UaZd3kX0Aufhiq3gk5p4IUpiXlTa7INHNz+zTRja9aNwrSwsfWPEuQlExXcWehkqGrm4rKV3fuRSD/RgKmnSSHunR/WE47EBvlKyBMt3q8/Bj1Jba/OPmav8KyQIDAQABAoIBAAmvFIKsyEN+zgpkdmIBR50vGBOsdRZZEnRfqDX5EAUWeNzBKnknmFGW9djCAvip4qNBOTG7lNOhTIchaLw705eNuseLPHFgnm493eRGdHRCRSSltvnKvqomlLi0QrNJD+fTSjX5dJVfzJztQHy43y6EkIcAUHI+H9hZ1N8tHvBCkqYgMsR+S4XjJDXBKzhqdWa8Jw6jkOoE5WpN/sUV3OJhs//KOGHjxK+J3sh0z9zmCAtA/Oq3FdwfWmqu8TH6JZrRl4N+F4X/cEA3BXntjuzaJXBXNlx3Rpsuxf8CSrTrYYj39slOxoQpV808hROuJRsYZBqhcyjSMql5SDTiKMECgYEA/1iibTNG1bcLJOE9R4uSoL2tyTsfO8F8F+ziVLZfkJE2SM258+uvD3zX2fsTFFHRlx/Vi2GcaX4FKLDS20s6P29laf6rlY2AuMJ4lj7BpJRkoK//9lywx6qdJrRJ104vz/ccEHX80aHaX7y/+HAo3NtZ2wSItq61b2L4BdXmL+kCgYEAyFLx/gbOCJcQZp4dl5qiO+C9aVpDNPEsh2K7KL4bnhmlAsAlpHewi8LLDABF+l68n0iap3sXA2CALBhRAY5xSU8IwCe1OmUwHFgv4PrAqo4DNlZj0KR2egFphW7qkvSTxAzJ079TvOwM93vsXHLRUMhQM47NwDAG+v3jR265F+ECgYEA52JvFVtA1grfe1TrzbhJb4VSRKZhgCmthJSw56i3Ym5j7YcW+VTZtsQfaTTeLiySK0q6nGogbWu3yw6ok/VQXAlasbkHzSaDvWjkEundWYDqyr2RybJmsxgE/fyjaQo9w0seUEBKj8AF/Xkx0DP6o1/VxeUO6dPZL41USR1yUHkCgYEAnXOMXuSMVnYd3vpSOhHBiBzJ45+diWQyYqs4ffqGjIqNhw7tx0qICiHuJB2m4vZJfUy8ufzmhrH3rDDkoruJ0Vv8fcP4DtDvsqeh4kxU2PlMDw5x39EUiirH/KfEWgNAjWybygHs2GYUfwT5L2TTnpIDb7LDh1Z4dhjN5hxiASECgYEApSs6Ts3O6IFaygTy3wj+CfFO+As7IhTQ12K/vhR8JRPmIoi0o899jgH+qsANmCpwX3m1P85T/ai/vL/P36WWH4xWlrs5Qxm/sbh3XXboVgbQfzY953GTjzMPZDZf1G4PXfqACZRaSa0d/5BLlXZdCVXE2R+rqLY3J6VFQnnMnQM="
          ]
        },
        "name": "rsa-generated",
        "providerId": "rsa-generated",
        "subComponents": {}
      },
      {
        "config": {
          "kid": [
            "160704b6-aec0-4392-9e9d-a067bcefd5a7"
          ],
          "priority": [
            "100"
          ],
          "secret": [
            "VR4VdeTk1lWfwUQno07ehw"
          ]
        },
        "name": "aes-generated",
        "providerId": "aes-generated",
        "subComponents": {}
      },
      {
        "config": {
          "algorithm": [
            "HS512"
          ],
          "kid": [
            "039e81bb-1483-4618-9c3e-a2259a4884b0"
          ],
          "priority": [
            "100"
          ],
          "secret": [
            "yGsTYPRw6pXtfV1upsI_tjlwdsmXRbKBhBQSbpHOp_wdDL4dr7_be5Kq5ofRiJRoKfefKbbLB0-gCu-OlyRTGcoTW6QPG114_Tf9siZUVxRpr8eroBHCCPp7ovLJ0O1cQDcPi5eN51Tbg8n0f0GFl63Rwutd2dIXYzPKXAVUerE"
          ]
        },
        "name": "hmac-generated-hs512",
        "providerId": "hmac-generated",
        "subComponents": {}
      }
    ],
    "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
      {
        "config": {
          "client-uris-must-match": [
            "true"
          ],
          "host-sending-registration-request-must-match": [
            "true"
          ]
        },
        "name": "Trusted Hosts",
        "providerId": "trusted-hosts",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {},
        "name": "Consent Required",
        "providerId": "consent-required",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "max-clients": [
            "200"
          ]
        },
        "name": "Max Clients Limit",
        "providerId": "max-clients",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "allowed-protocol-mapper-types": [
            "saml-role-list-mapper",
            "oidc-address-mapper",
            "oidc-full-name-mapper",
            "oidc-usermodel-attribute-mapper",
            "oidc-sha256-pairwise-sub-mapper",
            "saml-user-attribute-mapper",
            "oidc-usermodel-property-mapper",
            "saml-user-property-mapper"
          ]
        },
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subComponents": {},
        "subType": "authenticated"
      },
      {
        "config": {},
        "name": "Full Scope Disabled",
        "providerId": "scope",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "allow-default-scopes": [
            "true"
          ]
        },
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subComponents": {},
        "subType": "authenticated"
      },
      {
        "config": {
          "allow-default-scopes": [
            "true"
          ]
        },
        "name": "Allowed Client Scopes",
        "providerId": "allowed-client-templates",
        "subComponents": {},
        "subType": "anonymous"
      },
      {
        "config": {
          "allowed-protocol-mapper-types": [
            "oidc-address-mapper",
            "oidc-usermodel-property-mapper",
            "oidc-usermodel-attribute-mapper",
            "oidc-full-name-mapper",
            "saml-role-list-mapper",
            "saml-user-property-mapper",
            "saml-user-attribute-mapper",
            "oidc-sha256-pairwise-sub-mapper"
          ]
        },
        "name": "Allowed Protocol Mapper Types",
        "providerId": "allowed-protocol-mappers",
        "subComponents": {},
        "subType": "anonymous"
      }
    ],
    "org.keycloak.userprofile.UserProfileProvider": [
      {
        "config": {
          "kc.user.profile.config": [
            "{\"attributes\":[{\"name\":\"username\",\"displayName\":\"${username}\",\"validations\":{\"length\":{\"min\":3,\"max\":255},\"username-prohibited-characters\":{},\"up-username-not-idn-homograph\":{}},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"email\",\"displayName\":\"${email}\",\"validations\":{\"email\":{},\"length\":{\"max\":255}},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"firstName\",\"displayName\":\"${firstName}\",\"validations\":{\"length\":{\"max\":255},\"person-name-prohibited-characters\":{}},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"lastName\",\"displayName\":\"${lastName}\",\"validations\":{\"length\":{\"max\":255},\"person-name-prohibited-characters\":{}},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false}],\"groups\":[{\"name\":\"user-metadata\",\"displayHeader\":\"User metadata\",\"displayDescription\":\"Attributes, which refer to user metadata\"}]}"
          ]
        },
        "providerId": "declarative-user-profile",
        "subComponents": {}
      }
    ]
  },
  "defaultDefaultClientScopes": [
    "role_list",
    "profile",
    "email",
    "roles",
    "web-origins",
    "acr"
  ],
  "defaultOptionalClientScopes": [
    "offline_access",
    "address",
    "phone",
    "microprofile-jwt"
  ],
  "defaultRole": {
    "clientRole": false,
    "composite": true,
    "containerId": "93d30a1b-447b-423e-920b-86996ef8ae63",
    "description": "${role_default-roles}",
    "name": "default-roles-master"
  },
  "defaultSignatureAlgorithm": "RS256",
  "directGrantFlow": "direct grant",
  "displayName": "Keycloak",
  "displayNameHtml": "<div class=\"kc-logo-text\"><span>Keycloak</span></div>",
  "dockerAuthenticationFlow": "docker auth",
  "duplicateEmailsAllowed": false,
  "editUsernameAllowed": false,
  "enabled": true,
  "enabledEventTypes": [],
  "eventsEnabled": false,
  "eventsListeners": [
    "jboss-logging"
  ],
  "failureFactor": 30,
  "firstBrokerLoginFlow": "first broker login",
  "groups": [],
  "identityProviderMappers": [],
  "identityProviders": [],
  "internationalizationEnabled": false,
  "keycloakVersion": "24.0.1",
  "localizationTexts": {},
  "loginWithEmailAllowed": true,
  "maxDeltaTimeSeconds": 43200,
  "maxFailureWaitSeconds": 900,
  "maxTemporaryLockouts": 0,
  "minimumQuickLoginWaitSeconds": 60,
  "notBefore": 0,
  "oauth2DeviceCodeLifespan": 600,
  "oauth2DevicePollingInterval": 5,
  "offlineSessionIdleTimeout": 2592000,
  "offlineSessionMaxLifespan": 5184000,
  "offlineSessionMaxLifespanEnabled": false,
  "otpPolicyAlgorithm": "HmacSHA1",
  "otpPolicyCodeReusable": false,
  "otpPolicyDigits": 6,
  "otpPolicyInitialCounter": 0,
  "otpPolicyLookAheadWindow": 1,
  "otpPolicyPeriod": 30,
  "otpPolicyType": "totp",
  "otpSupportedApplications": [
    "totpAppFreeOTPName",
    "totpAppGoogleName",
    "totpAppMicrosoftAuthenticatorName"
  ],
  "permanentLockout": false,
  "quickLoginCheckMilliSeconds": 1000,
  "realm": "master",
  "refreshTokenMaxReuse": 0,
  "registrationAllowed": false,
  "registrationEmailAsUsername": false,
  "registrationFlow": "registration",
  "rememberMe": false,
  "requiredActions": [
    {
      "alias": "CONFIGURE_TOTP",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Configure OTP",
      "priority": 10,
      "providerId": "CONFIGURE_TOTP"
    },
    {
      "alias": "TERMS_AND_CONDITIONS",
      "config": {},
      "defaultAction": false,
      "enabled": false,
      "name": "Terms and Conditions",
      "priority": 20,
      "providerId": "TERMS_AND_CONDITIONS"
    },
    {
      "alias": "UPDATE_PASSWORD",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Update Password",
      "priority": 30,
      "providerId": "UPDATE_PASSWORD"
    },
    {
      "alias": "UPDATE_PROFILE",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Update Profile",
      "priority": 40,
      "providerId": "UPDATE_PROFILE"
    },
    {
      "alias": "VERIFY_EMAIL",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Verify Email",
      "priority": 50,
      "providerId": "VERIFY_EMAIL"
    },
    {
      "alias": "delete_account",
      "config": {},
      "defaultAction": false,
      "enabled": false,
      "name": "Delete Account",
      "priority": 60,
      "providerId": "delete_account"
    },
    {
      "alias": "webauthn-register",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Webauthn Register",
      "priority": 70,
      "providerId": "webauthn-register"
    },
    {
      "alias": "webauthn-register-passwordless",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Webauthn Register Passwordless",
      "priority": 80,
      "providerId": "webauthn-register-passwordless"
    },
    {
      "alias": "VERIFY_PROFILE",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Verify Profile",
      "priority": 90,
      "providerId": "VERIFY_PROFILE"
    },
    {
      "alias": "update_user_locale",
      "config": {},
      "defaultAction": false,
      "enabled": true,
      "name": "Update User Locale",
      "priority": 1000,
      "providerId": "update_user_locale"
    }
  ],
  "requiredCredentials": [
    "password"
  ],
  "resetCredentialsFlow": "reset credentials",
  "resetPasswordAllowed": false,
  "revokeRefreshToken": false,
  "roles": {
    "client": {
      "account": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3dc649df-347e-4213-8cd6-4c104eeff247",
          "description": "${role_manage-account-links}",
          "name": "manage-account-links"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3dc649df-347e-4213-8cd6-4c104eeff247",
          "description": "${role_view-consent}",
          "name": "view-consent"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3dc649df-347e-4213-8cd6-4c104eeff247",
          "description": "${role_view-groups}",
          "name": "view-groups"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3dc649df-347e-4213-8cd6-4c104eeff247",
          "description": "${role_view-profile}",
          "name": "view-profile"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "account": [
                "manage-account-links"
              ]
            }
          },
          "containerId": "3dc649df-347e-4213-8cd6-4c104eeff247",
          "description": "${role_manage-account}",
          "name": "manage-account"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "account": [
                "view-consent"
              ]
            }
          },
          "containerId": "3dc649df-347e-4213-8cd6-4c104eeff247",
          "description": "${role_manage-consent}",
          "name": "manage-consent"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3dc649df-347e-4213-8cd6-4c104eeff247",
          "description": "${role_view-applications}",
          "name": "view-applications"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3dc649df-347e-4213-8cd6-4c104eeff247",
          "description": "${role_delete-account}",
          "name": "delete-account"
        }
      ],
      "account-console": [],
      "admin-cli": [],
      "broker": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "0406fc4b-0f18-4f6d-b2cf-c3085d18413c",
          "description": "${role_read-token}",
          "name": "read-token"
        }
      ],
      "master-realm": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_impersonation}",
          "name": "impersonation"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_manage-events}",
          "name": "manage-events"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_manage-authorization}",
          "name": "manage-authorization"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "master-realm": [
                "query-users",
                "query-groups"
              ]
            }
          },
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_view-users}",
          "name": "view-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_manage-clients}",
          "name": "manage-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_query-groups}",
          "name": "query-groups"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_view-authorization}",
          "name": "view-authorization"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_view-realm}",
          "name": "view-realm"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_view-events}",
          "name": "view-events"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_query-clients}",
          "name": "query-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_query-realms}",
          "name": "query-realms"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_manage-users}",
          "name": "manage-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_query-users}",
          "name": "query-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_manage-realm}",
          "name": "manage-realm"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_create-client}",
          "name": "create-client"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "master-realm": [
                "query-clients"
              ]
            }
          },
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_view-clients}",
          "name": "view-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_manage-identity-providers}",
          "name": "manage-identity-providers"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "7a3f3e1c-262d-462a-9c29-b75a1133c821",
          "description": "${role_view-identity-providers}",
          "name": "view-identity-providers"
        }
      ],
      "orwell-realm": [
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_view-authorization}",
          "name": "view-authorization"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_view-events}",
          "name": "view-events"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_create-client}",
          "name": "create-client"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_manage-users}",
          "name": "manage-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_manage-events}",
          "name": "manage-events"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_query-groups}",
          "name": "query-groups"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_manage-authorization}",
          "name": "manage-authorization"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "orwell-realm": [
                "query-clients"
              ]
            }
          },
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_view-clients}",
          "name": "view-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_manage-clients}",
          "name": "manage-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_query-users}",
          "name": "query-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_view-realm}",
          "name": "view-realm"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_impersonation}",
          "name": "impersonation"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_manage-realm}",
          "name": "manage-realm"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": true,
          "composites": {
            "client": {
              "orwell-realm": [
                "query-groups",
                "query-users"
              ]
            }
          },
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_view-users}",
          "name": "view-users"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_view-identity-providers}",
          "name": "view-identity-providers"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_manage-identity-providers}",
          "name": "manage-identity-providers"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_query-clients}",
          "name": "query-clients"
        },
        {
          "attributes": {},
          "clientRole": true,
          "composite": false,
          "containerId": "3a961893-e5ac-43f5-b67c-c8f9ffefb4f0",
          "description": "${role_query-realms}",
          "name": "query-realms"
        }
      ],
      "security-admin-console": []
    },
    "realm": [
      {
        "attributes": {},
        "clientRole": false,
        "composite": false,
        "containerId": "93d30a1b-447b-423e-920b-86996ef8ae63",
        "description": "${role_offline-access}",
        "name": "offline_access"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": false,
        "containerId": "93d30a1b-447b-423e-920b-86996ef8ae63",
        "description": "${role_create-realm}",
        "name": "create-realm"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": true,
        "composites": {
          "client": {
            "master-realm": [
              "impersonation",
              "manage-events",
              "view-users",
              "manage-clients",
              "view-realm",
              "view-authorization",
              "view-events",
              "manage-users",
              "create-client",
              "manage-authorization",
              "query-groups",
              "query-clients",
              "query-realms",
              "query-users",
              "manage-realm",
              "view-clients",
              "manage-identity-providers",
              "view-identity-providers"
            ],
            "orwell-realm": [
              "view-events",
              "manage-users",
              "manage-events",
              "view-realm",
              "impersonation",
              "manage-identity-providers",
              "view-authorization",
              "create-client",
              "query-groups",
              "manage-authorization",
              "view-clients",
              "manage-clients",
              "query-users",
              "manage-realm",
              "view-users",
              "view-identity-providers",
              "query-clients",
              "query-realms"
            ]
          },
          "realm": [
            "create-realm"
          ]
        },
        "containerId": "93d30a1b-447b-423e-920b-86996ef8ae63",
        "description": "${role_admin}",
        "name": "admin"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": false,
        "containerId": "93d30a1b-447b-423e-920b-86996ef8ae63",
        "description": "${role_uma_authorization}",
        "name": "uma_authorization"
      },
      {
        "attributes": {},
        "clientRole": false,
        "composite": true,
        "composites": {
          "client": {
            "account": [
              "view-profile",
              "manage-account"
            ]
          },
          "realm": [
            "offline_access",
            "uma_authorization"
          ]
        },
        "containerId": "93d30a1b-447b-423e-920b-86996ef8ae63",
        "description": "${role_default-roles}",
        "name": "default-roles-master"
      }
    ]
  },
  "scopeMappings": [
    {
      "clientScope": "offline_access",
      "roles": [
        "offline_access"
      ]
    }
  ],
  "smtpServer": {},
  "sslRequired": "external",
  "ssoSessionIdleTimeout": 1800,
  "ssoSessionIdleTimeoutRememberMe": 0,
  "ssoSessionMaxLifespan": 36000,
  "ssoSessionMaxLifespanRememberMe": 0,
  "supportedLocales": [],
  "userManagedAccessAllowed": false,
  "users": [
    {
      "createdTimestamp": 1710493602766,
      "credentials": [
        {
          "createdDate": 1710493603009,
          "credentialData": "{\"hashIterations\":210000,\"algorithm\":\"pbkdf2-sha512\",\"additionalParameters\":{}}",
          "secretData": "{\"value\":\"3V1OPwLUqVTsqZSOFBjgCQHfCFwHnJ3anQ5s5ApQAXkbkcjh5SyxwiiZaGGf/9jDnnOvmuSMq8bMqN0afqsasg==\",\"salt\":\"0zYjZYqJ6LuRHEOi07pUfA==\",\"additionalParameters\":{}}",
          "type": "password"
        }
      ],
      "disableableCredentialTypes": [],
      "emailVerified": false,
      "enabled": true,
      "groups": [],
      "notBefore": 0,
      "realmRoles": [
        "admin",
        "default-roles-master"
      ],
      "requiredActions": [],
      "totp": false,
      "username": "admin"
    }
  ],
  "verifyEmail": false,
  "waitIncrementSeconds": 60,
  "webAuthnPolicyAcceptableAaguids": [],
  "webAuthnPolicyAttestationConveyancePreference": "not specified",
  "webAuthnPolicyAuthenticatorAttachment": "not specified",
  "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
  "webAuthnPolicyCreateTimeout": 0,
  "webAuthnPolicyExtraOrigins": [],
  "webAuthnPolicyPasswordlessAcceptableAaguids": [],
  "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
  "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
  "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
  "webAuthnPolicyPasswordlessCreateTimeout": 0,
  "webAuthnPolicyPasswordlessExtraOrigins": [],
  "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
  "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
  "webAuthnPolicyPasswordlessRpId": "",
  "webAuthnPolicyPasswordlessSignatureAlgorithms": [
    "ES256"
  ],
  "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
  "webAuthnPolicyRequireResidentKey": "not specified",
  "webAuthnPolicyRpEntityName": "keycloak",
  "webAuthnPolicyRpId": "",
  "webAuthnPolicySignatureAlgorithms": [
    "ES256"
  ],
  "webAuthnPolicyUserVerificationRequirement": "not specified"
}
